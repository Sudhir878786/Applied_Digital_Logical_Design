`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date:    11:01:23 08/25/2021 
// Design Name: 
// Module Name:    proccessor 
// Project Name: 
// Target Devices: 
// Tool versions: 
// Description: 
//
// Dependencies: 
//
// Revision: 
// Revision 0.01 - File Created
// Additional Comments: 
//
//////////////////////////////////////////////////////////////////////////////////
module cpu3(input clk,input por, input [3:0]dest,input rs1,input rs2,input f,input we,
output reg [3:0] x,output reg[6:0]y,output reg[1:0]d
    );
	
		reg s1=3'b0;
		reg s2=3'b1;
		reg s3=3'b010;
		reg s4=3'b011;
		reg s5=3'b100;
		
		reg [2:0]this_state;
		reg [2:0]next_state;
	 debouncer bounce(.clk(clk),.por(por),.we(we),.dwe(dwe));
	 new_clock new(.clk(clk),.por(por),.new_clock(new_clock));
	 reg [7:0]regfile[15:0];
	 reg [4:0]i;
	 reg [7:0]r;
	 reg [1:0]j;
	 reg [7:0]q1;
	 reg [7:0]q2;
	 reg [3:0]fv;
	 reg [3:0]rs1v;
	 reg [3:0]rs2v;
	 reg [3:0]wrv;
	 
	 always@(posedge new_clock)
	 begin
	 if(por)begin
	 for (i=0;i<16;i=i+1'b1)begin
	 regfile[i]=8'b00000000;
	 end
	 this_state <= s1;
	 x=4'b1110;
	 y=7'b1111111;
	 r=8'b00000000;
	 d[0]=1'b1;
	 d[1]=1'b0;
	 j=2'b0;
	 end
	 else begin
	 this_state <= next_state;
	
		x=4'b0000;
		if(this_state==3'b0)y=7'b1001111;
		if(this_state==3'b1)y=7'b0010010;
	 	if(this_state==3'b010)y=7'b0000110;
		if(this_state==3'b011)y=7'b1001100;
		
case(this_state)
	 s1:begin
	 if(rs1==1'b1)begin
		rs1v=dest;
		q1=regfile[rs1v];
		next_state=s2;
		end
		else next_state=s1;
		end
	 
	s2:begin
		if(rs2==1'b1)begin
		rs2v=dest;
		q2=regfile[rs2v];
		next_state=s3;
		end
		else next_state=s2;
		end
	
	
	s3:begin
		if(f==1'b1)begin 
		fv=dest;
		next_state=s4;
		case(fv)
		4'b0000:r=q1;
		4'b0001:{d[1],r}=-q1;
		4'b0010:{d[1],r}=q1+q2;
		4'b0011:{d[1],r}=q1-q2;
		4'b0100:{d[1],r}=q1<<1;
		4'b0101:r=q1>>1;
		4'b0110:{d[1],r}=q1+1'b1;
		4'b0111:{d[1],r}=q1-1'b1;
		4'b1000:r=~q1;
		4'b1001:r=q1&q2;
		4'b1010:r=q1|q2;
		4'b1011:r=q1^q2;
		4'b1100:r=q1<<1;
		4'b1101:r=q1>>1;
		4'b1110: begin r=q1;
					
					end
		
		4'b1111:r=8'b11111111;
		endcase
		if(r==8'b0)d[0]=1'b1;
		else d[0]=1'b0;
		end
		else next_state=s3;
		end
	
	s4:begin
		if(we==1'b1)begin
		wrv=dest;
		regfile[wrv]=r;
		next_state=s5;
		end
		else next_state=s4;
		end
	default:next_state=s1;
		endcase
		end
		
	
	end

endmodule


module debouncer (
    input clk,
    input por,
    input we,
    output reg dwe
);
    
    reg [3:0] counter;
    

   always@(posedge clk,posedge por) begin
        if(por) begin
            counter=4'b0;
            dwe=1'b0;
        end
        else begin
            if(dwe!=we) begin
                counter=counter+4'b1;
            end
            if(counter==4'b1001) begin
                counter=4'b0;
                dwe=we;
            end
            if(dwe==we && counter!=0) begin
                counter=4'b0;
            end
        end
    end
endmodule


module new_clock(clk,por,new_clock);
input clk,por;
output reg new_clock;
 reg [4:0]ctr;
	always@(posedge clk)
		begin
			if(por)
				begin
					ctr <=5'd0;
					new_clock<=1'b0;
				end
			else begin
				ctr <= ctr+5'd1;
				if(ctr == 5'd25000)
						new_clock <=1'b1;
				else new_clock <=1'b0;
				end
		end
endmodule
