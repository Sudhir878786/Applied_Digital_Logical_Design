module cpu3(input clk,input por, input [3:0]dest,input rs1,input rs2,input f,input we,
output reg [3:0] x,output reg[6:0]y,output reg[1:0]d,output reg [2:0]next_state,output reg [2:0]this_state,output reg [7:0]q1,
	 output reg [7:0]q2,output reg f1,output reg f2,output reg f3,output reg f4,output reg f5,output reg f6
    );
	
		parameter
		s1=3'b000,
		s2=3'b001,
		 s3=3'b010,
		s4=3'b011;
		
		
		
		
	 debouncer bounce(.new_clock(new_clock),.por(por),.we(we),.dwe(dwe));
	 new_clock new(.clk(clk),.por(por),.new_clock(new_clock));
	 reg [7:0]regfile[15:0];
	 reg [4:0]i;
	 reg [7:0]r;
	 reg j;
	 reg [3:0]R;
	 reg [3:0]y1;
	 reg [3:0]y2;
	 
	 reg [3:0]fv;
	 reg [3:0]rs1v;
	 reg [3:0]rs2v;
	 reg [3:0]wrv;
	 
	 always@(posedge clk)
	 begin
	 if(por)begin
	 this_state = s1;
	 x=4'b1110;
	 
	 j=1'b0;
	 
	 
	 end
	 else begin
	 j=j+1'b1;
	 this_state = next_state;
		if(j==1'b1)begin
			x=1110;
			R=y1;end
		else begin
			x=1101;
			R=y2;
		
		end
		end
		end
always@(this_state,rs1,rs2,f,we)begin
if(por)begin
	 for (i=0;i<16;i=i+1'b1)begin
	 regfile[i]=8'b00000000;
	 end
end
else begin
		
case(this_state)
	 s1:begin
		f1=1;
		if(rs1==1'b1)begin
		rs1v=dest;
		q1=regfile[rs1v];
		next_state=s2;
		end
		else next_state=s1;
		end
	 
	s2:begin
		f2=1;
		if(rs2==1'b1)begin
		rs2v=dest;
		q2=regfile[rs2v];
		next_state=s3;
		end
		else next_state=s2;
		end
	
	
	s3:begin
		f3=1;
		if(f==1'b1)begin 
		f5=1;
		fv=dest;
		next_state=s4;
		case(fv)
		4'b0000:r=q1;
		4'b0001:{d[1],r}=-q1;
		4'b0010:{d[1],r}=q1+q2;
		4'b0011:{d[1],r}=q1-q2;
		4'b0100:{d[1],r}=q1<<1;
		4'b0101:r=q1>>1;
		4'b0110:{d[1],r}=q1+1'b1;
		4'b0111:{d[1],r}=q1-1'b1;
		4'b1000:begin r=~q1;
							end
		4'b1001:r=q1&q2;
		4'b1010:r=q1|q2;
		4'b1011:r=q1^q2;
		4'b1100:r=q1<<1;
		4'b1101:r=q1>>1;
		4'b1110: begin r=q1;
						y1=r[7:4];
						y2=r[3:0];
						f6=1;
					end
		
		4'b1111:r=8'b11111111;
		endcase
		if(r==8'b0)d[0]=1'b1;
		else d[0]=1'b0;
		end
		else next_state=s3;
		end
	
	s4:begin
		f4=1;
		f1=0;
		f2=0;
		f3=0;
		f5=0;
		f6=0;
		
		if(we==1'b1)begin
		wrv=dest;
		regfile[wrv]=r;
		next_state=s1;
		end
		else next_state=s4;
		end
	default:next_state=s1;
		endcase
		end
		
	
	end
	always@(R)begin
		case(R)
		4'b0000:y=7'b0000001;
		4'b0001:y=7'b1001111;
		4'b0010:y=7'b0010010;
		4'b0011:y=7'b0000110;
		4'b0100:y=7'b1001100;
		4'b0101:y=7'b0100100;
		4'b0110:y=7'b0100000;
		4'b0111:y=7'b0001111;
		4'b1000:y=7'b0000000;
		4'b1001:y=7'b0000100;
		4'b1010:y=7'b0001000;
		4'b1011:y=7'b1100000;
		4'b1100:y=7'b0110001;
		4'b1101:y=7'b0000010;
		4'b1110:y=7'b0110000;
		4'b1111:y=7'b0111000;
		  default:y=7'b1111111;
		endcase
		
	end

endmodule


module debouncer (
    input new_clock,
    input por,
    input we,
    output reg dwe
);
    
    reg [3:0] counter;
    

   always@(posedge new_clock,posedge por) begin
        if(por) begin
            counter=4'b0;
            dwe=1'b0;
        end
        else begin
            if(dwe!=we) begin
                counter=counter+4'b1;
            end
            if(counter==4'b1001) begin
                counter=4'b0;
                dwe=we;
            end
            if(dwe==we && counter!=0) begin
                counter=4'b0;
            end
        end
    end
endmodule


module new_clock(clk,por,new_clock);
input clk,por;
output reg new_clock;
 reg [4:0]ctr;
	always@(posedge clk)
		begin
			if(por)
				begin
					ctr <=5'd0;
					new_clock<=1'b0;
				end
			else begin
				ctr <= ctr+5'd1;
				if(ctr == 5'd25000)
						new_clock <=1'b1;
				else new_clock <=1'b0;
				end
		end
endmodule





module cpu3test;

	// Inputs
	reg clk;
	reg por;
	reg [3:0] dest;
	reg rs1;
	reg rs2;
	reg f;
	reg we;

	// Outputs
	wire [3:0] x;
	wire [6:0] y;
	wire [1:0] d;
	wire [2:0] next_state;
	wire [2:0] this_state;
	wire [7:0]q1;
	wire [7:0]q2;
	wire f1;
	wire f2;
	wire f3;
	wire f4;
	wire f5;
	wire f6;

	// Instantiate the Unit Under Test (UUT)
	cpu3 uut (
		.clk(clk), 
		.por(por), 
		.dest(dest), 
		.rs1(rs1), 
		.rs2(rs2), 
		.f(f), 
		.we(we), 
		.x(x), 
		.y(y), 
		.d(d), 
		.next_state(next_state),
		.this_state(this_state),
		.q1(q1),
		.q2(q2),
		.f1(f1),
		.f2(f2),
		.f3(f3),
		.f4(f4),
		.f5(f5),
		.f6(f6)
	);
	always#3 clk=~clk;
	initial begin
		// Initialize Inputs
		clk = 0;
		por = 1;
		dest = 0;
		rs1 = 0;
		rs2 = 0;
		f = 0;
		we = 0;
		#20;
		por=0;
		
		dest=4'b0000;
		rs1=1'b1;
		#10;
		rs1=1'b0;
		#10;
		dest=4'b0000;
		rs2=1'b1;
		#10;
		rs2=1'b0;
		#10;
		dest=4'b1000;
		f=1'b1;
		#10;
		f=1'b0;
		#10;
		dest=4'b0000;
		we=1'b1;
		#10;
		we=1'b0;
		#10;
		dest=4'b0000;
		rs1=1'b1;
		#10;
		rs1=1'b0;
		#10;
		dest=4'b0001;
		rs2=1'b1;
		#10;
		
		rs2=1'b0;
		#10;
		dest=4'b1101;
		f=1'b1;
		#10;

		f=1'b0;
		#10;
		dest=4'b0010;
		we=1'b1;
		#10;
		we=1'b0;
		#10;
		
		dest=4'b0010;
		rs1=1'b1;
		#10;
		rs1=1'b0;
		#10;
		dest=4'b0001;
		rs2=1'b1;
		#10;
		
		rs2=1'b0;
		#10;
		dest=4'b0110;
		f=1'b1;
		#10;

		f=1'b0;
		#10;
		dest=4'b0011;
		we=1'b1;
		#10;
		we=1'b0;
		#10;
		
		dest=4'b0011;
		rs1=1'b1;
		#10;
		rs1=1'b0;
		#10;
		dest=4'b0001;
		rs2=1'b1;
		#10;
		
		rs2=1'b0;
		#10;
		dest=4'b1101;
		f=1'b1;
		#10;

		f=1'b0;
		#10;
		dest=4'b0100;
		we=1'b1;
		#10;
		we=1'b0;
		#10;
		
		dest=4'b0100;
		rs1=1'b1;
		#10;
		rs1=1'b0;
		#10;
		dest=4'b0001;
		rs2=1'b1;
		#10;
		
		rs2=1'b0;
		#10;
		dest=4'b0100;
		f=1'b1;
		#10;

		f=1'b0;
		#10;
		dest=4'b0100;
		we=1'b1;
		#10;
		we=1'b0;
		#10;
		
		dest=4'b0100;
		rs1=1'b1;
		#10;
		rs1=1'b0;
		#10;
		dest=4'b0001;
		rs2=1'b1;
		#10;
		
		rs2=1'b0;
		#10;
		dest=4'b0100;
		f=1'b1;
		#10;

		f=1'b0;
		#10;
		dest=4'b0100;
		we=1'b1;
		#10;
		we=1'b0;
		#10;
		
		dest=4'b0100;
		rs1=1'b1;
		#10;
		rs1=1'b0;
		#10;
		dest=4'b0001;
		rs2=1'b1;
		#10;
		
		rs2=1'b0;
		#10;
		dest=4'b1110;
		f=1'b1;
		#10;

		f=1'b0;
		// Wait 100 ns for global reset to finish
		#100;
        
		// Add stimulus here

	end
      
endmodule

