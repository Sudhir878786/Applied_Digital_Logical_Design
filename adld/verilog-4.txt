Answer-1

module mux(in,out,sel);
 
input [7:0]in;
input [2:0]sel;
output out;
 
reg out;
wire [2:0]sel;
wire [7:0]in;
 
always @(sel or in)
begin
 
if (sel==0)
out = in[0];
if (sel==1)
out = in[1];
if (sel==2)
out = in[2];
if (sel==3)
out = in[3];
if (sel==4)
out = in[4];
if (sel==5)
out = in[5];
if (sel==6)
out = in[6];
if (sel==7)
out = in[7];
end
endmodule 

_____________________

module mux(in,out,sel);
 
input [7:0]in;
input [2:0]sel;
output out;
 
reg out;
wire [2:0]sel;
wire [7:0]in;
 
always @(sel or in)
begin
 
   case( sel )
       0 : out = in[0];
       1 : out = in[1];
       2 : out = in[2];
       3 : out = in[3];
	   4 : out = in[4];
       5 : out = in[5];
       6 : out = in[6];
       7 : out = in[7];
	  
   endcase
end
endmodule

____________________________________________

module mux(in,out,sel);
 
input [7:0]in;
input [2:0]sel;
output out;
 

wire [2:0]sel;
wire [7:0]in;
 
assign out = in[sel]; 
endmodule  
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Answer-2


module mux41(out,i0,i1,i2,i3,s1,s0);
input i0,i1,i2,i3,s1,s0;
output out;
wire mux1,mux2;
mux21 mux_1(mux1,i0,i1,s1);
mux21 mux_2(mux2,i2,i3,s1);
mux21 mux_3(out,mux1,mux2,s0);
endmodule

module mux21(out, a, b,s);
	 
input a;
input b;
input s;
output reg out;

always @ (a or b or s)
if (s==0) out =a;
else out=b;

endmodule
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Asnwer-3

module mux(in,out,sel);
 
input [7:0]in;
input [2:0]sel;
output out;
 
reg out;
wire [2:0]sel;
wire [7:0]in;
 
always @(sel or in)
begin
 
   case( sel )
       0 : out = 1'b1;
       1 : out = 1'b1;
       2 : out = 1'b0;
       3 : out = 1'b1;
	   4 : out = 1'b0;
       5 : out = 1'b0;
       6 : out = 1'b0;
       7 : out = 1'b1;
	  
   endcase
end
endmodule

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Asnwer-4

module parity(
    input [3:0] number,
    input odd_even,
    output reg parity
    );

reg [1:0] parity_sum;

always @(number)
begin
parity_sum = number[0] + number[1] + number[2] + number[3];
end

always @(odd_even or parity_sum)
begin
	if (odd_even==0) // odd parity
	begin
		if (parity_sum[0] == 0) parity=1;
		if (parity_sum[0] == 1) parity =0;
	end

	if (odd_even==1) // even parity
	begin
		if (parity_sum[0] == 0) parity=0;
		if (parity_sum[0] == 1) parity =1;
	end
end

endmodule 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Answer-5

module ludesign(a,b,sel, out);
 
input [3:0] a;
input [3:0] b;
input [1:0]sel;
output   out;
 
wire [3:0] a;
wire [3:0] b;
wire [1:0]sel;
reg   out;
reg [4:0] temp_add;

always @(a or b) temp_add = a+b;
 
always @(sel or a or b)
begin
 
   case( sel )
       0 : begin 
		     if(a > b ) out =0;  
			  if (a<=b)  out =1; 
			  end

       1 : begin 
		     if(a[0]  ==0) out =0;  
			  if (a[0] ==1)  out =1; 
			  end
			  
	    2 : begin 
		     if(b[0]  ==0) out =0;  
			  if (b[0] ==1) out =1; 
			  end
			  
		 3 : begin 
		     if(temp_add[4]  ==0) out =0;  
			  if (temp_add[4] ==1) out =1; 
			  end	  
   endcase
end
endmodul

